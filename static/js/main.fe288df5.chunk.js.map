{"version":3,"sources":["TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","_ref","todos","updateTodo","handleCheckboxChange","_ref2","_ref2$target","target","checked","id","dataset","console","log","completed","handleTodoTitleChange","e","title","value","map","todo","index","React","createElement","Fragment","className","type","onChange","aria-label","data-id","key","baseUrl","App","_useState","useState","_useState2","_slicedToArray","setTodos","todoNameRef","useRef","useEffect","getAllTodo","fetch","then","res","json","response","data","handleAddTodo","name","current","method","mode","body","JSON","stringify","addNewTodo","align","filter","length","ref","placeholder","onKeyDown","event","preventDefault","onClick","curTodo","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fe288df5.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function TodoList({ todos, updateTodo }) {\n    const handleCheckboxChange = ({target:{checked, dataset:{id}}}) => {\n        console.log(id);\n        console.log(checked);\n        updateTodo({id: id, completed: checked});\n    }\n    const handleTodoTitleChange = (e) => {\n        updateTodo({id: e.target.dataset.id, title: e.target.value});\n    }\n\n    return (\n        todos.map((todo, index) => {\n            return (\n                <>\n                    <div className=\"input-group mb-3\">\n                        <div className=\"input-group-text\">\n                            <input className=\"form-check-input\" type=\"checkbox\" checked={todo.completed} onChange={handleCheckboxChange} aria-label=\"Checkbox for following text input\" data-id={todo.id} key={index}/>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" aria-label=\"Text input with checkbox\" data-id={todo.id} key={index} value={todo.title} onChange={handleTodoTitleChange}/>\n                    </div>\n                </>\n            )\n        })\n    )\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport TodoList from './TodoList';\n\nconst baseUrl = 'https://todo-uyt1.onrender.com/api/todolist';\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const todoNameRef = useRef()\n\n  // get local stored todos\n  useEffect(() => {\n    getAllTodo();\n  }, [])\n\n  useEffect(() => {\n    console.log('todos updated');\n  }, [todos])\n\n  const getAllTodo = () => {\n    fetch(baseUrl)\n      .then(res => res.json())\n      .then((res) => {\n        setTodos(res.response.data)\n      });\n  }\n\n  const addNewTodo = (name) => {\n    fetch(baseUrl, {\n      method: 'POST',\n      mode: 'cors',\n      body: JSON.stringify({ title: name })\n    }).then(res => res.json())\n      .then((res) => {\n        setTodos(res.response.data)\n      });\n  }\n\n  const updateTodo = (curTodo) => {\n    fetch(baseUrl, {\n      method: 'PUT',\n      mode: 'cors',\n      body: JSON.stringify({ id: curTodo.id, title: curTodo.title, completed: curTodo.completed })\n    }).then(res => res.json())\n      .then((res) => {\n        if(res.response.data) setTodos(res.response.data)\n      });\n  }\n\n  const handleAddTodo = (e) => {\n    const name = todoNameRef.current.value\n    if (name) {\n      addNewTodo(name);\n      todoNameRef.current.value = null\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleAddTodo(event);\n    }\n  };\n  const handleClearCompleted = () => {\n    fetch(baseUrl, {\n      method: 'DELETE',\n      mode: 'cors'\n    }).then(res => res.json())\n      .then((res) => {\n        if(res.response.data) setTodos(res.response.data)\n      });\n  }\n\n  return (\n    <>\n      <h1 align=\"center\" className=\"appTitle\">TodoList</h1>\n      <div className=\"todo-pending\" align=\"right\"> <span> <span>{todos.filter(todo => !todo.completed).length} </span> Todo items left </span> </div>\n      <div className=\"addTodoItem\">\n        <input ref={todoNameRef} className=\"form-control addTodoItemInput\" id=\"floatingInput\" placeholder=\"Add Todo Item\" onKeyDown={handleKeyDown}/>\n        <button onClick={handleAddTodo}>‚èé</button>\n      </div>\n      <TodoList todos={todos} updateTodo={updateTodo} />\n      <button className=\"btn btn-danger\" onClick={handleClearCompleted}> Clear Completed </button>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.css'; \nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}